---
import { getLangFromUrl, useTranslations } from '../../i18n/utils'
import NavToolsDropdown from './NavToolsDropdown.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const homePageUrl = lang === 'en' ? '/' : `/${lang}/`
---

<header>
  <nav class='site-nav contentWrapper'>
    <a href={homePageUrl} class='site-title'>
      <img src='/img/wm-logo.svg' alt='Web Monetization logo' />
    </a>
    <button
      id='menuToggle'
      class='menu-toggle ghost btn'
      aria-controls='nav-menu'
      aria-expanded='true'
      aria-label='Toggle Menu'
      title='Toggle Menu'
    >
      <svg
        class='menu-icon icon--hamburger'
        viewBox='0 0 24 24'
        fill='none'
        xmlns='http://www.w3.org/2000/svg'
      >
        <path
          d='M4 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H4C3.45 16 3 16.45 3 17C3 17.55 3.45 18 4 18ZM4 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H4C3.45 11 3 11.45 3 12C3 12.55 3.45 13 4 13ZM3 7C3 7.55 3.45 8 4 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H4C3.45 6 3 6.45 3 7Z'
        ></path>
      </svg>
      <svg
        class='menu-icon icon--close'
        viewBox='0 0 24 24'
        fill='none'
        xmlns='http://www.w3.org/2000/svg'
      >
        <path
          d='M12.0008 12.7269L8.40884 16.3189C8.30217 16.4256 8.18417 16.4756 8.05484 16.4689C7.9255 16.4622 7.8075 16.4059 7.70084 16.2999C7.59417 16.1939 7.54084 16.0726 7.54084 15.9359C7.54084 15.8006 7.59417 15.6796 7.70084 15.5729L11.2738 11.9999L7.68184 8.4329C7.57517 8.32623 7.52517 8.2049 7.53184 8.0689C7.5385 7.9329 7.59484 7.8119 7.70084 7.7059C7.80684 7.5999 7.92817 7.54657 8.06484 7.5459C8.20017 7.5459 8.32117 7.59923 8.42784 7.7059L12.0008 11.2979L15.5678 7.7059C15.6745 7.59923 15.7925 7.5459 15.9218 7.5459C16.0512 7.5459 16.1692 7.59923 16.2758 7.7059C16.3865 7.8159 16.4418 7.9379 16.4418 8.0719C16.4418 8.2059 16.3865 8.3259 16.2758 8.4319L12.7028 11.9999L16.2948 15.5919C16.4015 15.6986 16.4548 15.8166 16.4548 15.9459C16.4548 16.0752 16.4015 16.1932 16.2948 16.2999C16.1848 16.4106 16.0628 16.4659 15.9288 16.4659C15.7948 16.4659 15.6748 16.4106 15.5688 16.2999L12.0008 12.7269Z'
        ></path>
      </svg>
    </button>
    <ul id='navMenu' class='nav-menu collapsed'>
      <li class='nav-link__tools' id='tools-dropdown'>
        <button>
          Tools
          <svg
            class='nav-tools-btn'
            viewBox='0 0 16 16'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <path
              d='M8 10.1247L13.1433 4.98008C13.2416 4.88185 13.3598 4.83341 13.498 4.83474C13.6358 4.83608 13.754 4.88585 13.8527 4.98408C13.9509 5.08274 14 5.20119 14 5.33941C14 5.47719 13.9509 5.59541 13.8527 5.69408L8.75733 10.7847C8.64978 10.8923 8.52978 10.971 8.39733 11.0207C8.26489 11.0705 8.13244 11.0952 8 11.0947C7.86756 11.0943 7.73511 11.0696 7.60267 11.0207C7.47022 10.9719 7.35022 10.8932 7.24267 10.7847L2.14667 5.69008C2.04844 5.59141 2 5.47363 2.00133 5.33674C2.00267 5.2003 2.05245 5.08297 2.15067 4.98474C2.24889 4.88652 2.36711 4.83741 2.50533 4.83741C2.64356 4.83741 2.76156 4.88652 2.85933 4.98474L8 10.1247Z'
            ></path>
          </svg>
        </button>
        <NavToolsDropdown />
      </li>
      <li class='nav-link__docs'>
        <a href='/docs' data-umami-event='Landing page - WebMo docs'
          >{t('nav.documentation')}</a
        >
      </li>
      <li class='nav-link__spec'>
        <a href='/specification' data-umami-event='Landing page - WebMo specs'
          >{t('nav.specification')}</a
        >
      </li>
    </ul>
  </nav>
</header>

<style>
  header {
    color: var(--nav-text-color);
    font: var(--font-small-regular);
    position: sticky;
    top: 0;
  }

  nav.site-nav {
    display: flex;
    align-items: center;
    position: relative;
    justify-content: space-between;
    padding: var(--padding-xs) var(--padding-2xl);
    background-color: var(--color-white);
  }

  .nav-menu button {
    color: var(--nav-text-color);
  }

  .nav-menu button,
  .nav-menu a {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    background: none;
    border: none;
    color: var(--nav-text-color);
    cursor: pointer;
    padding: var(--padding-sm) var(--padding-md);
    text-decoration: none;
    border-radius: var(--moderate-rounding);
  }

  .nav-menu button:hover,
  .nav-menu button:focus-visible,
  .nav-menu a:hover,
  .nav-menu a:focus-visible {
    background: var(--surface-hover-color);
    color: var(--button-hover-color);
  }

  .nav-tools-btn {
    height: var(--spacing-md);
    width: var(--spacing-md);
    display: block;
    fill: var(--nav-text-color);
    margin: var(--spacing-3xs) 0;
  }

  .site-title {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 100%;
  }

  .site-title img {
    width: 2.75rem;
    height: 2.75rem;
    display: block;
  }

  button.menu-toggle {
    width: 3rem;
    height: 3rem;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .menu-icon {
    transition: 0.5s ease-in-out;
    cursor: pointer;
    height: 1.25rem;
    width: 1.25rem;
    transition: 0.25s ease-in-out;
    fill: var(--nav-text-color);
    background-color: transparent;
    display: block;
    opacity: 1;
  }

  .nav-menu {
    display: flex;
    gap: var(--spacing-md);
  }

  .collapsed {
    display: none;
  }

  @media screen and (max-width: 768px) {
    header {
      margin: 16px 16px 0 16px;
    }

    nav.site-nav {
      box-shadow: 0 12px 20px 0px rgba(0, 0, 0, 0.06);
      border-radius: var(--moderate-rounding);
      padding: var(--padding-2xs) var(--padding-xs) var(--padding-2xs)
        var(--padding-md);
    }

    nav.site-nav:not(:has(.nav-menu.collapsed)) {
      border-radius: var(--moderate-rounding) var(--moderate-rounding) 0 0;
    }

    .nav-menu:not(.collapsed) {
      border-radius: 0 0 var(--moderate-rounding) var(--moderate-rounding);
    }

    .nav-menu {
      position: absolute;
      top: 100%;
      background-color: var(--color-white);
      width: 100%;
      list-style: none;
      padding: var(--padding-md);
      left: 0;
      right: 0;
      flex-direction: column;
    }

    #tools-dropdown button {
      width: 100%;
    }

    .site-title img {
      width: 2rem;
      height: 2rem;
      flex: none;
    }

    button.menu-toggle {
      display: flex;
    }

    .icon--close {
      display: none;
    }

    .icon--hamburger {
      display: block;
    }

    .menu-toggle.open .icon--hamburger {
      display: none;
    }

    .menu-toggle.open .icon--close {
      display: block;
    }
  }

  #tools-dropdown {
    position: relative;
  }

  @media screen and (min-width: 769px) {
    header {
      box-shadow: 0 12px 20px 0px rgba(0, 0, 0, 0.06);
      background-color: var(--color-white);
    }

    .nav-menu {
      align-items: center;
      list-style-type: none;
      flex: 1;
      justify-content: end;
    }

    .menu-toggle {
      display: none;
    }

    .collapsed {
      display: block;
    }
  }
</style>

<script>
  // TODO tools down arrow rotates on click
  // TODO click outside closes menu on mobile and closes tool section on full screen, one or the other, i.e. only one click outside
    const toggle = document.getElementById('menuToggle')
  const menu = document.getElementById('navMenu')
  const toolsButton = document.querySelector('#tools-dropdown > button')
  const toolsDropdown = document.querySelector('#tools-dropdown .tools-dropdown')

  let menuOpen = false
  let submenuOpen = false

  const openMenu = () => {
    toggle?.setAttribute('aria-expanded', 'true')
    menu?.classList.remove('collapsed')
    toggle?.classList.add('open')
    toggle?.classList.remove('closed')
    menuOpen = true
    bindGlobalEvents()
  }

  const closeMenu = () => {
    toggle?.setAttribute('aria-expanded', 'false')
    menu?.classList.add('collapsed')
    toggle?.classList.add('closed')
    toggle?.classList.remove('open')
    menuOpen = false
    closeSubmenu()
    unbindGlobalEvents()
  }

  const openSubmenu = () => {
    toolsDropdown?.classList.add('open')
    submenuOpen = true
  }

  const closeSubmenu = () => {
    toolsDropdown?.classList.remove('open')
    submenuOpen = false
  }

  const handleMainToggle = () => {
    menuOpen ? closeMenu() : openMenu()
  }

  const handleSubmenuToggle = (e) => {
    e.stopPropagation() // Prevent from bubbling up to outside click
    submenuOpen ? closeSubmenu() : openSubmenu()
  }

  const handleClickOutside = (event) => {
    const target = event.target
    const isInMenu = menu?.contains(target)
    const isInToggle = toggle?.contains(target)

    if (!isInMenu && !isInToggle) {
      closeMenu()
    }
  }

  const handleEsc = (event) => {
    if (event.key === 'Escape') {
      if (submenuOpen) {
        closeSubmenu()
      } else if (menuOpen) {
        closeMenu()
      }
    }
  }

  const bindGlobalEvents = () => {
    document.addEventListener('click', handleClickOutside)
    document.addEventListener('keydown', handleEsc)
  }

  const unbindGlobalEvents = () => {
    document.removeEventListener('click', handleClickOutside)
    document.removeEventListener('keydown', handleEsc)
  }

  const isWide = window.matchMedia('(min-width: 769px)')
  const handleResize = (evt) => {
    closeMenu()
    if (evt.matches) {
      // Wide screen: menu always shown
      menu?.classList.remove('collapsed')
    }
  }

  toggle?.addEventListener('click', handleMainToggle)
  toolsButton?.addEventListener('click', handleSubmenuToggle)
  isWide.addEventListener('change', handleResize)
  handleResize(isWide)
</script>
