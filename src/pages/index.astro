---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import Base from "../layouts/Base.astro";
import data from "../data/home.json";
import CardList from "../components/pages/CardList.astro";
import UpdateList from "../components/pages/UpdateList.astro"; 

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---
<Base title={t('site.title')} description={t('site.description')}>
  <section class="section hero">
    <div class="contentWrapper">
      <div class="heading-wrapper">
        <h1>
          Welcome to Web Monetization
        </h1>
        <img
          alt=""
          role="presentation"
          src="/img/wm-heading-vector.svg"
          width="442"
          height="23"
        />
      </div>
      <video
        class="hero-video"
        src="/video/hero-animation.webm"
        poster="/img/hero-img.svg"
        autoplay
        muted
        loop
        playsinline
        width="1280"
        height="941"
        aria-hidden="true"
      ></video>
      <p class="heroTagline">
        We seek to empower content owners and users alike by enabling seamless micropayments, fostering a fair and sustainable digital economy, and working on top of traditional advertising and subscription-based revenue models.
      </p>
    </div>
  </section>
  <section class="section">
    <div class="contentWrapper">
      <div class="wallet-info">
        <div class="wallet-content">
          <h2 class="font-h3">Wallets</h2>
          <p>
            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
          </p>
          <p class="bold">Do you know other wallets?</p>
          <a href="https://github.com/WICG/webmonetization/pulls" target="_blank" rel="noreferrer noopener" data-umami-event="Home page link - GitHub PR" class="btn secondary">
            Make a PR
            <svg viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M14.25 2.09989C14.0781 1.98868 13.8815 1.92139 13.6775 1.90396C13.4735 1.88652 13.2683 1.91946 13.08 1.99989L6.91 4.42989C6.76407 4.48984 6.60776 4.52042 6.45 4.51989H2.5C2.16848 4.51989 1.85054 4.65159 1.61612 4.88601C1.3817 5.12043 1.25 5.43837 1.25 5.76989V5.86989H0V8.86989H1.25V8.99989C1.25783 9.32619 1.39298 9.63648 1.62656 9.86445C1.86013 10.0924 2.17361 10.22 2.5 10.2199L4 13.3999C4.10157 13.614 4.26148 13.7952 4.46136 13.9225C4.66124 14.0499 4.893 14.1183 5.13 14.1199H5.76C6.08979 14.1173 6.40516 13.9844 6.63743 13.7503C6.86969 13.5161 7.00001 13.1997 7 12.8699V10.3399L13.08 12.7699C13.2297 12.8287 13.3891 12.8592 13.55 12.8599C13.7996 12.8553 14.0426 12.7789 14.25 12.6399C14.4145 12.5288 14.5501 12.3802 14.6458 12.2063C14.7414 12.0324 14.7943 11.8383 14.8 11.6399V3.12989C14.7991 2.92641 14.7485 2.72623 14.6527 2.54673C14.5568 2.36723 14.4186 2.21384 14.25 2.09989ZM5.75 5.76989V8.99989H2.5V5.76989H5.75ZM5.75 12.8699H5.12L3.89 10.2199H5.75V12.8699ZM7.37 9.14989C7.25125 9.08926 7.12745 9.03908 7 8.99989V5.69989C7.1262 5.67366 7.24997 5.63686 7.37 5.58989L13.55 3.12989V11.6099L7.37 9.14989ZM14.83 6.11989V8.61989C15.1615 8.61989 15.4795 8.4882 15.7139 8.25378C15.9483 8.01936 16.08 7.70142 16.08 7.36989C16.08 7.03837 15.9483 6.72043 15.7139 6.48601C15.4795 6.25159 15.1615 6.11989 14.83 6.11989Z"/>
            </svg>
          </a>
        </div>
        {data.wallets.length > 0 && (
        <div class="cards">
          <CardList cards={data.wallets} />
        </div>
      )}
      </div>
    </div>
  </section>
  <section class="section">
    <div class="contentWrapper">
      {data.updates.length > 0 && (
        <h2 class="font-h2 updates-heading">Important Updates</h2>
        <div class="updates-carousel">
          <button class="carousel-arrow inactive-arrow" id="prev-button">
            <svg role="img" width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
              <title>Previous Button</title>
              <path d="M7.3445 10.3203L13.7753 16.7495C13.8981 16.8723 13.9587 17.02 13.957 17.1928C13.9553 17.365 13.8931 17.5128 13.7703 17.6361C13.647 17.7589 13.4989 17.8203 13.3262 17.8203C13.1539 17.8203 13.0062 17.7589 12.8828 17.6361L6.5195 11.267C6.38505 11.1325 6.28672 10.9825 6.2245 10.817C6.16228 10.6514 6.13144 10.4859 6.132 10.3203C6.13255 10.1548 6.16339 9.9892 6.2245 9.82365C6.28561 9.65809 6.38394 9.50809 6.5195 9.37365L12.8878 3.00365C13.0112 2.88087 13.1584 2.82031 13.3295 2.82198C13.5001 2.82365 13.6467 2.88587 13.7695 3.00865C13.8923 3.13142 13.9537 3.2792 13.9537 3.45198C13.9537 3.62476 13.8923 3.77226 13.7695 3.89448L7.3445 10.3203Z" fill="currentColor"/>
            </svg>
          </button>
          <UpdateList updates={data.updates} />
          <button class="carousel-arrow" id="next-button">
            <svg role="img" width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
              <title>Next Button</title>
              <path d="M12.6555 10.3203L6.22467 3.89115C6.10189 3.76837 6.04134 3.62059 6.043 3.44781C6.04467 3.27559 6.10689 3.12781 6.22967 3.00448C6.353 2.8817 6.50106 2.82031 6.67384 2.82031C6.84606 2.82031 6.99384 2.8817 7.11717 3.00448L13.4805 9.37365C13.6149 9.50809 13.7133 9.65809 13.7755 9.82365C13.8377 9.9892 13.8686 10.1548 13.868 10.3203C13.8674 10.4859 13.8366 10.6514 13.7755 10.817C13.7144 10.9825 13.6161 11.1325 13.4805 11.267L7.11217 17.637C6.98884 17.7598 6.84161 17.8203 6.6705 17.8186C6.49995 17.817 6.35328 17.7548 6.2305 17.632C6.10772 17.5092 6.04634 17.3614 6.04634 17.1886C6.04634 17.0159 6.10772 16.8684 6.2305 16.7461L12.6555 10.3203Z" fill="currentColor"/>
            </svg>
          </button>
        </div>
        <div class="updates-dots" id="updates-dots">
          {data.updates.map( update => <span></span>)}
        </div>
      )}
    </div>
  </section>
</Base>

<style>
section.hero {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.hero .contentWrapper {
  height: 100%;
  display: flex;
  flex-grow: 1;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
}

.heading-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: var(--spacing-lg);
}

.heading-wrapper h1 {
  margin: 0;
}

.heading-wrapper img {
  width: 75%;
  max-width: 25rem;
  margin-top: 0.5rem;
  height: auto;
}

.hero-video {
  max-height: 50vh;
  max-width: 80vw;
  object-fit: contain;
  aspect-ratio: 1280 / 941;
  margin-bottom: var(--spacing-lg);
  flex: 1 1 10%;
}

.heroTagline {
  font: var(--font-style-h5);
  margin-bottom: var(--spacing-lg);
}

.wallet-info {
  margin-inline: var(--spacing-md);
  padding: var(--spacing-md);
  background: var(--color-white);
  border-radius: var(--pill-rounding);
  display: grid;
  grid-template-columns: 1fr auto;
  gap: var(--spacing-2xl);
}

.wallet-info .wallet-content {
  display: flex;
  gap: var(--spacing-md);
  flex-direction: column;
  align-items: flex-start;
  flex: 10 1 20rem;
}

.wallet-info a svg {
  width: 1.25rem;
  height: 1.25rem;
  fill: currentColor;
}

.cards {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
  align-items: flex-end;
  flex: 1 1 20rem;
}

.updates-heading {
  margin-bottom: var(--spacing-lg);
}

.updates-carousel {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-lg);
}

.updates-carousel .carousel-arrow {
  flex-shrink: 0;
  display: flex;
  padding: 0;
  border: none;
  background-color: inherit;
  color: var(--button-carousel-color);
  cursor: pointer;
}

.updates-carousel .carousel-arrow:hover {
  color: var(--button-carousel-hover-color);
}

.updates-carousel .carousel-arrow.inactive-arrow {
  color: var(--button-carousel-inactive-color);
  cursor: default;
}

.updates-dots {
  display: flex;
  flex-direction: row;
  justify-content: center;
  gap: var(--spacing-xs);
}

.updates-dots span {
  display: inline-block;
  width: var(--spacing-sm);
  height: var(--spacing-sm); 
  border-radius: 50%;
  border: none;
  background-color: #D9D9D9;
}

.updates-dots span.active-dot {
  background: linear-gradient(to right, var(--gradient-3-start), var(--gradient-3-stop));
}

@media screen and (max-width: 767px) {
  section.hero {
    min-height: unset;
  }

  .heading-wrapper h1 {
    font: var(--font-h3);
  }

  .heading-wrapper img {
    max-width: 16rem;
  }

  .heroTagline {
    margin-bottom: 0;
  }

  .wallet-info {
    grid-template-columns: 1fr;
  }

  .wallet-info .wallet-content {
    flex: 1 1 auto;
  }

  .cards {
    flex: 1 1 auto;
    align-items: stretch;
  }

  .updates-heading {
    font: var(--font-h4);
    text-align: center;
  }

  .updates-dots {
    margin-bottom: var(--spacing-lg);
  }
}
</style>

<script>
  const updatesContainer = document.querySelector('#updates-list');
  const prevButton = document.querySelector('#prev-button');
  const nextButton = document.querySelector('#next-button');
  const carouselDots = document.querySelectorAll('#updates-dots span');
  const numberOfUpdates = carouselDots.length;

  if (updatesContainer instanceof HTMLElement) {
    let width = updatesContainer.offsetWidth;

    window.addEventListener('resize', () => {
      width = updatesContainer.offsetWidth;
    });

    prevButton?.addEventListener('click', () => scrollUpdates('left'));
    nextButton?.addEventListener('click', () => scrollUpdates('right'));
    
    carouselDots[0].classList.add('active-dot');
    
    function scrollUpdates(direction: 'left' | 'right') {
      const amount = direction === 'left' ? -width : width

      updatesContainer?.scrollBy({
        left: amount,
        behavior: 'smooth',
      })

      updateUI(direction); 
    }

    function updateUI(direction: 'left' | 'right') {
      const currentIndex = getCurrentSlideIndex()
      const indexToGo =
        direction === 'left'
          ? currentIndex - 1 >= 0
            ? currentIndex - 1
            : 0
          : currentIndex + 1 <= numberOfUpdates - 1
            ? currentIndex + 1
            : numberOfUpdates - 1
      
      carouselDots.forEach((dot) => dot.classList.remove('active-dot'));
      carouselDots[indexToGo].classList.add('active-dot');

      prevButton?.classList.remove('inactive-arrow');
      nextButton?.classList.remove('inactive-arrow');

      if(indexToGo === 0) {
        prevButton?.classList.add('inactive-arrow');
      }

      if(indexToGo === (numberOfUpdates - 1)) {
        nextButton?.classList.add('inactive-arrow');
      }
    }

    function getCurrentSlideIndex() {
      if (!updatesContainer) return 0;

      const scrollLeft = updatesContainer.scrollLeft;
      const currentIndex = Math.round(scrollLeft / width);
      return currentIndex;
    }
  }
</script>